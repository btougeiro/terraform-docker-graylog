# -----------------------------------------------------------------------------
# BACKEND
# -----------------------------------------------------------------------------

terraform {
  backend "local" {}
  required_version = "1.2.2"
  required_providers {
    docker = {
      source = "kreuzwerker/docker"
    }
  }
}

# -----------------------------------------------------------------------------
# PROVIDER
# -----------------------------------------------------------------------------

# Docker Desktop on Windows
provider "docker" {
  host = "npipe:////./pipe/dockerDesktopLinuxEngine"
}

# Docker on Unix
#provider "docker" {
#  host = "unix:///var/run/docker.sock"
#}

# -----------------------------------------------------------------------------
# LOCALS
# -----------------------------------------------------------------------------

locals {
  mongo_version         = "5.0.9"
  elasticsearch_version = "7.10.2"
  graylog_version       = "4.3-jre11"
}

# -----------------------------------------------------------------------------
# MODULE
# -----------------------------------------------------------------------------

module "docker_graylog" {
  source = "../"

  /* DEFAULT VARS */

  keep_locally = true
  network_name = "terraform-docker-graylog"
  restart      = "always"

  /* MONGO */

  mongo_container_name = "mongo"
  mongo_image          = "mongo"
  mongo_version        = local.mongo_version

  mongo_labels = [
    {
      label = "Database"
      value = "MongoDB"
    },
    {
      label = "Version"
      value = local.mongo_version
    }
  ]

  mongo_num_of_containers = 1

  mongo_volumes = [
    {
      container_path = "/data/db"
    }
  ]

  /* ELASTICSEARCH */

  elasticsearch_container_name = "elasticsearch"

  elasticsearch_env_vars = [
    "http.host=0.0.0.0",
    "transport.host=localhost",
    "network.host=0.0.0.0",
    "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m"
  ]

  elasticsearch_image   = "docker.elastic.co/elasticsearch/elasticsearch-oss"
  elasticsearch_version = local.elasticsearch_version

  elasticsearch_labels = [
    {
      label = "Search Engine"
      value = "Elasticsearch"
    },
    {
      label = "Version"
      value = local.elasticsearch_version
    }
  ]

  elasticsearch_num_of_containers = 1

  elasticsearch_volumes = [
    {
      container_path = "/usr/share/elasticsearch/data"
    }
  ]

  /* GRAYLOG */

  /*
  Password Secret and Root Password are generated by:
  echo -n "Enter Password: " && head -1 < /dev/stdin | tr -d '\n' | sha256sum | cut -d " " -f1
  output: Enter Password: Sup3rS3cr3tP4ssw0rd!
  output: 9836e5d781e1acb74b9d3c518867fb9be087bf93bcf98c571489ded3216c56c5
  */

  graylog_container_name = "graylog"

  graylog_env_vars = [
    "GRAYLOG_ROOT_USERNAME=admin",
    "GRAYLOG_ROOT_PASSWORD_SHA2=9836e5d781e1acb74b9d3c518867fb9be087bf93bcf98c571489ded3216c56c5",
    "GRAYLOG_PASSWORD_SECRET=9836e5d781e1acb74b9d3c518867fb9be087bf93bcf98c571489ded3216c56c5",
    "GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/",
  ]

  graylog_image   = "graylog/graylog"
  graylog_version = local.graylog_version

  graylog_labels = [
    {
      label = "Log Centralizer"
      value = "Graylog"
    },
    {
      label = "Version"
      value = local.graylog_version
    }
  ]
  graylog_num_of_containers = 1

  graylog_ports = [
    {
      internal = 9000
      external = 9000
    },
    {
      internal = 1514
      external = 1514
      protocol = "tcp"
    },
    {
      internal = 1514
      external = 1514
      protocol = "udp"
    },
    {
      internal = 12201
      external = 12201
      protocol = "tcp"
    },
    {
      internal = 12201
      external = 12201
      protocol = "udp"
    }
  ]

  graylog_volumes = [
    {
      container_path = "/usr/share/graylog/data/journal"
    },
    {
      container_path = "/usr/share/graylog/data/config"
    }
  ]
}
